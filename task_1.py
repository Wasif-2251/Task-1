# -*- coding: utf-8 -*-
"""Task-1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aG0vFHkbJRadrD14AeTVr4N_Ze3JguGt
"""

import csv

# Reading CSV
with open('/content/16_student_performance.csv', mode='r') as file:
    reader = csv.reader(file)
    data = list(reader)

# Writing CSV
with open('modified_student_data.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerows(data)

import pandas as pd

# Loading the data into DataFrame
df = pd.read_csv('/content/16_student_performance.csv')

# Calculate average, minimum, maximum score
avg_score = df['Score'].mean()
min_score = df['Score'].min()
max_score = df['Score'].max()

# Identify students with attendance < 75% or missing assignments
low_attendance = df[df['Attendance Percentage'] < 75]
missing_assignments = df[df['Assignment Completion'] == 'No']

# Convert score to integer if stored as string
df['Score'] = pd.to_numeric(df['Score'], errors='coerce')

import matplotlib.pyplot as plt

# Bar chart of average scores by subject
avg_scores_by_subject = df.groupby('Subject')['Score'].mean()
avg_scores_by_subject.plot(kind='bar', title="Average Scores by Subject")
plt.show()

# Pie chart for attendance categories
attendance_categories = pd.cut(df['Attendance Percentage'], bins=[0, 50, 75, 100], labels=["<50%", "50-75%", ">75%"])
attendance_categories.value_counts().plot(kind='pie', autopct='%1.1f%%')
plt.show()

# Line graph for student's performance trend over time
student_data = df[df['Student ID'] == 'STU-12345']
student_data.plot(x='Subject', y='Score', kind='line', title="Performance Trend")
plt.show()

def calculate_aggregate_score(student_id):
    student_data = df[df['Student ID'] == student_id]
    return student_data['Score'].sum()

def assign_grade(score):
    if score >= 90:
        return 'A'
    elif score >= 75:
        return 'B'
    elif score >= 50:
        return 'C'
    else:
        return 'Fail'

import re

# Regular expression to validate student IDs
def validate_student_id(student_id):
    pattern = r"^STU-\d{5}$"
    return re.match(pattern, student_id) is not None

def add_new_student():
    name = input("Enter student name: ")
    student_id = input("Enter student ID: ")
    subject = input("Enter subject: ")
    score = int(input("Enter score: "))
    attendance = int(input("Enter attendance percentage: "))
    assignment = input("Enter assignment completion (Yes/No): ")

    # Add new student to the DataFrame
    new_student = pd.DataFrame([[name, student_id, subject, score, attendance, assignment]],
                               columns=['Student Name', 'Student ID', 'Subject', 'Score', 'Attendance Percentage', 'Assignment Completion'])
    return new_student

# Example of updating student's score
def update_student_score(student_id, new_score):
    df.loc[df['Student ID'] == student_id, 'Score'] = new_score